
	Documentation fournie par doc openAI swagger
	http://localhost:8085/v3/api-docs cette url permet d'avoir la documentation complète des methodes de l'API afin que l'utilisateurs de l'API sache tout sur les methodes

	On peut importer une collection dans postman grace a ce lien pour tester notre API. Cela permet de plus avoir a entrer les url dans postman
	car l'import de la collection fera ca automatiquement

	Dans l'interface qui implémente un JPARepository on n'a pas besoin d'ecrire le corps des méthodes on écris juste les méthodes en suivant une convention
	de nommage et le JPArepostory fera la bonne requete tout seul dans la base de donnée

	Toujours utiliser les DTO pour communiquer avec le front en passant par les mappers(Front <---DTO-------->Entity)





Cette partie du code dans la class main a permis de tester les operations CRUD à effectuer dans la base de donnée
public static void main(String[] args) {
		SpringApplication.run(EbankingBackendApplication.class, args);
	}

/*@Bean
	CommandLineRunner commandLineRunner(BankAccountRepository bankAccountRepository){
		return args -> {

		};

	}*/
	@Bean
	CommandLineRunner commandLineRunner(BankService bankService){
		return args -> {
		bankService.consulter();
		};

	}
	//on crée les données dans la base h2 pour tester
	//@Bean
	CommandLineRunner start(CustomerRepository customerRepository,
							BankAccountRepository bankAccountRepository,
							AccountOperationRepository accountOperationRepository){
		return args -> {
			Stream.of("vini","mbappe","rodrygo").forEach(name->{
				Customer customer= new Customer();
				customer.setName(name);
				customer.setEmail(name+"@gmail.com");
				customerRepository.save(customer);
			});

			customerRepository.findAll().forEach(cust->{
				CurrentAccount currentAccount = new CurrentAccount();
				currentAccount.setCustomer(cust);
				currentAccount.setId(UUID.randomUUID().toString());
				currentAccount.setBalance(Math.random()*90000);
				currentAccount.setCurrency("euros");
				currentAccount.setStatus(AccountStatus.ACTIVATED);
				currentAccount.setCreatedAt(new Date(2024,06,05));
				currentAccount.setOverDraft(9000);
				bankAccountRepository.save(currentAccount);

				SavingAccount savingAccount = new SavingAccount();
				savingAccount.setCustomer(cust);
				savingAccount.setId(UUID.randomUUID().toString());
				savingAccount.setBalance(Math.random()*90000);
				savingAccount.setCurrency("euros");
				savingAccount.setStatus(AccountStatus.ACTIVATED);
				savingAccount.setCreatedAt(new Date(2024,06,05));
				savingAccount.setInterestRate(5.5);
				bankAccountRepository.save(savingAccount);
			});

			bankAccountRepository.findAll().forEach(acc-> {
				for (int i=0;i<10;i++){
						AccountOperation accountOperation = new AccountOperation();
						accountOperation.setBankAccount(acc);
						accountOperation.setAmount(Math.random()*90000);
						accountOperation.setOperationDate(new Date(2024,06,05));
						accountOperation.setType(Math.random()>0.5?OperationType.DEBIT:OperationType.CREDIT);
						accountOperationRepository.save(accountOperation);
					}
				});


		};
	}


-----------------------------------------------------------------------------
TESTE DE LA COUCHE SERVICE SI TOUT SE PASSE BIEN EN BASE DE DE DONNEES AVANT DE PASSER A LA COUCHE WEB
    ON TESTE TOUTES LES METHODES DE LA COUCHE SERVICES
	@Bean
	CommandLineRunner commandLineRunner(BankAccountService bankAccountService){
		return args -> {
			//on cree les customers
			Stream.of("modric","kross","casemiro").forEach(name->{
				Customer customer = new Customer();
				customer.setName(name);
				customer.setEmail(name+"@gmail.com");
				bankAccountService.saveCustomer(customer);
			});
			// pour chaque customer on cree 1 currentAccount et un savingAccount
			bankAccountService.listCustomers().forEach(customer -> {
				try {
					bankAccountService.saveCurrentBankAccount(Math.random()*50000,20000,customer.getId());
					bankAccountService.saveSavingBankAccount(Math.random()*50000,5.5,customer.getId());
			//pour chaque compte on créé les opérations
					List<BankAccount> bankAccounts = bankAccountService.listBankAccount();
					for(BankAccount bankAccount:bankAccounts){
						for(int i=0; i<10 ;i++){
							bankAccountService.credit(bankAccount.getId(),50000+Math.random()*120000,"credit");
							bankAccountService.debit(bankAccount.getId(),1000+Math.random()*9000,"debit");
						}

					}
				} catch (CustomerNotFoundException e) {
					e.printStackTrace();
				} catch (BankAccountNotFoundException | BalanceNotSufficientException e) {
					e.printStackTrace();
				}
			});


		};


	}

	---------------------------------------------------------------
